/*
Copyright 2020 The OneFlow Authors. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#include <cstring>
#include "oneflow/cambricon/bang/bang_internal.h"
#include "oneflow/cambricon/bang/bang_kernels.h"

namespace oneflow {

static constexpr int32_t BATCH = 256;
static __mlu_shared__ int64_t s_count[1024];

template<typename T>
__mlu_global__ void bang_multi_count_not_finite_kernel_internal(int64_t n,
                                                                AddressList<BATCH> inputs_info,
                                                                int64_t* workspace) {
  int32_t core_dim = taskDim / clusterDim;
  int32_t core_id = taskId % core_dim;

  int64_t count = 0;
  for (int64_t i = clusterId; i < n; i += clusterDim) {
    const T* input = static_cast<const T*>(inputs_info.address[i]);
    int64_t size = inputs_info.sizes[i];
    int64_t step = (size + core_dim - 1) / core_dim;
    int64_t start = step * core_id;
    int64_t end = start + step;
    if (end > size) { end = size; }

    for (int32_t j = start; j < end; ++j) {
      T x = input[j];
      count += (isnan(x) || isinf(x));
    }
  }
  int32_t offset = clusterId * core_dim;
  s_count[offset + core_id] = count;
  __sync_cluster();

  if (clusterId < n && core_id == 0) {
    int64_t count = s_count[offset];
    for (int i = 1; i < core_dim; ++i) { count += s_count[offset + i]; }
    workspace[clusterId] += count;
  }
}

__mlu_global__ void bang_multi_count_not_finite_kernel_internal_final(int64_t n,
                                                                      const int64_t* workspace,
                                                                      int64_t* output) {
  int64_t count = 0;
  for (int i = 0; i < n; ++i) { count += workspace[i]; }
  *output = count;
}

template<typename T>
void bang_multi_count_not_finite_kernel(BangHandle& handle, int64_t n, const T** inputs,
                                        const int64_t* sizes, int64_t* output, void* workspace,
                                        int64_t workspace_size) {
  if (n == 0) {
    cnrtMemsetAsync(output, 0, sizeof(int64_t), handle.queue);
    return;
  }
  cnrtMemsetAsync(workspace, 0, workspace_size, handle.queue);

  // TODO(): check workspace_size == n * sizeof(int64_t)
  int64_t* workspace_ptr = static_cast<int64_t*>(workspace);

  // cnrtDim3_t dim = {handle.nclusters, handle.ncores_per_cluster, 1};
  cnrtDim3_t dim = {handle.ncores_per_cluster * handle.nclusters, 1, 1};
  cnrtFunctionType_t func_type = CNRT_FUNC_TYPE_UNION4;

  for (int64_t i = 0; i < n; i += BATCH) {
    int32_t num = (n - i) > BATCH ? BATCH : (n - i);
    AddressList<BATCH> inputs_info;
    memcpy(inputs_info.address, inputs + i, num * sizeof(void*));
    memcpy(inputs_info.sizes, sizes + i, num * sizeof(int64_t));

    bang_multi_count_not_finite_kernel_internal<T>
        <<<dim, func_type, handle.queue>>>(num, inputs_info, workspace_ptr);
  }

  dim = {1, 1, 1};
  bang_multi_count_not_finite_kernel_internal_final<<<dim, CNRT_FUNC_TYPE_BLOCK, handle.queue>>>(
      n, workspace_ptr, output);
}

void bang_multi_count_not_finite_half_kernel(BangHandle& handle, int64_t n, const void** inputs,
                                             const int64_t* sizes, int64_t* output, void* workspace,
                                             int64_t workspace_size) {
  bang_multi_count_not_finite_kernel(handle, n, reinterpret_cast<const half**>(inputs), sizes,
                                     output, workspace, workspace_size);
}

#define INSTANCE_BANG_MULTI_COUNT_NOT_FINITE_KERNEL(T)                                         \
  template void bang_multi_count_not_finite_kernel<T>(                                         \
      BangHandle & handle, int64_t n, const T** inputs, const int64_t* sizes, int64_t* output, \
      void* workspace, int64_t workspace_size);

INSTANCE_BANG_MULTI_COUNT_NOT_FINITE_KERNEL(float)

#undef INSTANCE_BANG_MULTI_COUNT_NOT_FINITE_KERNEL

}  // namespace oneflow
