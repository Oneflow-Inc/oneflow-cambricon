/*
Copyright 2020 The OneFlow Authors. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#include "oneflow/cambricon/bang/bang_kernels.h"

namespace oneflow {

template<typename T>
__mlu_global__ void bang_scalar_pow_grad_kernel(int64_t n, const T* x, const T* dy,
                                                const float value, T* dx) {
  for (int64_t i = taskId; i < n; i += taskDim) {
    dx[i] = value * dy[i] * pow(x[i], value - static_cast<T>(1.0));
  }
}

template<typename T>
void bang_scalar_pow_gradient_kernel(BangHandle& handle, int64_t n, const T* x, const T* dy,
                                     const float value, T* dx) {
  cnrtDim3_t dim = {handle.nclusters, handle.ncores_per_cluster, 1};
  cnrtFunctionType_t func_type = CNRT_FUNC_TYPE_UNION1;
  bang_scalar_pow_grad_kernel<<<dim, func_type, handle.queue>>>(n, x, dy, value, dx);
}

void bang_scalar_pow_gradient_half_kernel(BangHandle& handle, int64_t n, const void* x,
                                          const void* dy, const float value, void* dx) {
  cnrtDim3_t dim = {handle.nclusters, handle.ncores_per_cluster, 1};
  cnrtFunctionType_t func_type = CNRT_FUNC_TYPE_UNION1;
  bang_scalar_pow_grad_kernel<<<dim, func_type, handle.queue>>>(
      n, static_cast<const half*>(x), static_cast<const half*>(dy), value, static_cast<half*>(dx));
}

#define INSTANCE_BANG_SCALAR_POW_GRAD_KERNEL(T)                                                \
  template void bang_scalar_pow_gradient_kernel<T>(BangHandle & handle, int64_t n, const T* x, \
                                                   const T* dy, const float value, T* dx);

INSTANCE_BANG_SCALAR_POW_GRAD_KERNEL(float)

#undef INSTANCE_BANG_SCALAR_POW_GRAD_KERNEL

}  // namespace oneflow
