/*
Copyright 2020 The OneFlow Authors. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#include "oneflow/cambricon/bang/bang_kernels.h"

namespace oneflow {

template<typename T, typename K>
__mlu_global__ void bang_gather_internal(const T* input, int64_t batch, int64_t N, int64_t length,
                                         const K* index, int64_t index_size, T* output,
                                         int64_t offset) {
  int64_t input_spatial_size = N * length;
  int64_t output_spatial_size = index_size * length;

  for (int64_t i = taskId; i < batch * index_size; i += taskDim) {
    int64_t batch_idx = i / index_size;
    int64_t index_idx = i - batch_idx * index_size;
    K idx = index[index_idx] - offset;

    T* to = output + batch_idx * output_spatial_size + index_idx * length;
    if (idx >= 0 && idx < N) {
      const T* from = input + batch_idx * input_spatial_size + idx * length;
      __memcpy(to, from, length * sizeof(T), GDRAM2GDRAM);
    } else {
      __gdramset(to, length, T{});
    }
  }
}

template<typename T, typename K>
void bang_gather_kernel(BangHandle& handle, const T* input, int64_t batch, int64_t N,
                        int64_t length, const K* index, int64_t index_size, T* output,
                        int64_t offset) {
  cnrtDim3_t dim = {handle.nclusters, handle.ncores_per_cluster, 1};
  cnrtFunctionType_t func_type = CNRT_FUNC_TYPE_UNION1;
  bang_gather_internal<<<dim, func_type, handle.queue>>>(input, batch, N, length, index, index_size,
                                                         output, offset);
}

#define INSTANCE_BANG_GATHER_INTERNAL_IMPL(T, K)                                             \
  template void bang_gather_kernel<T, K>(BangHandle & handle, const T* input, int64_t batch, \
                                         int64_t N, int64_t length, const K* index,          \
                                         int64_t index_size, T* output, int64_t offset);

#define INSTANCE_BANG_GATHER_INTERNAL(T)         \
  INSTANCE_BANG_GATHER_INTERNAL_IMPL(T, int64_t) \
  INSTANCE_BANG_GATHER_INTERNAL_IMPL(T, int32_t) \
  INSTANCE_BANG_GATHER_INTERNAL_IMPL(T, uint32_t)

INSTANCE_BANG_GATHER_INTERNAL(float)
INSTANCE_BANG_GATHER_INTERNAL(half)
INSTANCE_BANG_GATHER_INTERNAL(int8_t)
INSTANCE_BANG_GATHER_INTERNAL(int16_t)
INSTANCE_BANG_GATHER_INTERNAL(int32_t)
INSTANCE_BANG_GATHER_INTERNAL(uint8_t)
INSTANCE_BANG_GATHER_INTERNAL(uint16_t)
INSTANCE_BANG_GATHER_INTERNAL(uint32_t)
INSTANCE_BANG_GATHER_INTERNAL(bool)

#undef INSTANCE_BANG_GATHER_INTERNAL
#undef INSTANCE_BANG_GATHER_INTERNAL_IMPL

}  // namespace oneflow
